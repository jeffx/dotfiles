set nocompatible
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'gmarik/Vundle.vim'
Plugin 'tmhedberg/SimpylFold'
Plugin 'vim-scripts/indentpython.vim'
Plugin 'Valloric/YouCompleteMe'
Plugin 'scrooloose/syntastic'
Plugin 'nvie/vim-flake8'
Plugin 'jnurmine/Zenburn'
Plugin 'altercation/vim-colors-solarized'
Plugin 'scrooloose/nerdtree'
Plugin 'Xuyuanp/nerdtree-git-plugin'
Plugin 'tpope/vim-fugitive'
Plugin 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'}
Plugin 'vimwiki/vimwiki'
Plugin 'tpope/vim-surround'

"Put all plugins before this line
call vundle#end()
filetype plugin indent on
py << EOF
import os
import sys
if 'VIRTUAL_ENV' in os.environ:
  project_base_dir = os.environ['VIRTUAL_ENV']
  activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
  execfile(activate_this, dict(__file__=activate_this))
EOF
let python_highlight_all=1
syntax enable
set encoding=utf-8
set number
set numberwidth=5
set tabstop=4
set autoindent
set expandtab
set shiftwidth=4
set cursorline
set showmatch
set showcmd
set ruler
set laststatus=2
set autoread
set autowrite
set ignorecase
set smartcase
set hlsearch
nnoremap <silent> <leader>, :noh<cr> " Stop highlight after searching
nnoremap j gj
nnoremap k gk
nnoremap <tab> %
vnoremap <tab> %
nnoremap v <C-V>
nnoremap <C-V> v
vnoremap v <C-V>
vnoremap <C-V> v

set incsearch
set showmatch
set list listchars=tab:»·,trail:.,nbsp:.
set diffopt+=vertical
" relative numbering
set rnu
function! ToggleNumbersOn()
    set nu!
    set rnu
endfunction
function! ToggleRelativeOn()
    set rnu!
    set nu
endfunction
autocmd FocusLost * call ToggleRelativeOn()
autocmd FocusGained * call ToggleRelativeOn()
autocmd InsertEnter * call ToggleRelativeOn()
autocmd InsertLeave * call ToggleRelativeOn()



"set background=dark
colorscheme zenburn
call togglebg#map("<F5>")
set foldmethod=indent
set foldlevel=99
highlight BadWhitespace ctermbg=red guibg=red
noremap <space> za
map <C-F> :NERDTreeToggle<CR>
let g:SimpylFold_docstring_preview=1
let NERDTreeIgnore=['\.pyc$', '\~$']
au BufNewFile,BufRead *.py 
    \ setlocal tabstop=4 softtabstop=4 shiftwidth=4 textwidth=79
    \ formatoptions=qnr1 wrapmargin=0 colorcolumn=+1
    \ expandtab autoindent fileformat=unix
au BufNewFile,BufRead *.py,*.pyw,*.c.*.h match BadWhitespace /\s\+$/
au BufNewFile,BufRead *.js,*.html,*.css
    \ set tabstop=2 softtabstop=2 shiftwidth=2
au BufNewFile,BufRead *.sh,*.bash,*.ksh
    \ set tabstop=4 softtabstop=4 shiftwidth=4
    
"au vimenter * NERDTree
au bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
au StdinReadPre * let s:std_in=1
au VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
"===[ Make the 81st column stand out ] ===
" for the entire 81st column (full-screen)
"- highlight ColorColumn ctermbg=magenta
"- set colorcolumn=81
" OR just the 81st column
highlight ColorColumn ctermbg=magenta
highlight WhiteOnRed ctermbg=red ctermfg=white
call matchadd('ColorColumn', '\%81v', 100)
"=====[ Highlight matches when jumping to next ]=============
" This rewires n and N to do the highlighing...
nnoremap <silent> n   n:call HLNext(0.4)<cr>
nnoremap <silent> N   N:call HLNext(0.4)<cr>
function! HLNext (blinktime)
    let [bufnum, lnum, col, off] = getpos('.')
    let matchlen = strlen(matchstr(strpart(getline('.'),col-1),@/))
    let target_pat = '\c\%#\%('.@/.'\)'
    let ring = matchadd('WhiteOnRed', target_pat, 101)
    redraw
    exec 'sleep ' . float2nr(a:blinktime * 1000) . 'm'
    call matchdelete(ring)
    redraw
endfunction
"function! HLNext (blinktime)
"    highlight RedOnRed ctermfg=red ctermbg=red
"    let [bufnum, lnum, col, off] = getpos('.')
"    let matchlen = strlen(matchstr(strpart(getline('.'),col-1),@/))
"    echo matchlen
"    let ring_pat = (lnum > 1 ? '\%'.(lnum-1).'l\%>'.max([col-4,1]) .'v\%<'.(col+matchlen+3).'v.\|' : '')
"            \ . '\%'.lnum.'l\%>'.max([col-4,1]) .'v\%<'.col.'v.'
"            \ . '\|'
"            \ . '\%'.lnum.'l\%>'.max([col+matchlen-1,1]) .'v\%<'.(col+matchlen+3).'v.'
"            \ . '\|'
"            \ . '\%'.(lnum+1).'l\%>'.max([col-4,1]) .'v\%<'.(col+matchlen+3).'v.'
"    let ring = matchadd('RedOnRed', ring_pat, 101)
"    redraw
"    exec 'sleep ' . float2nr(a:blinktime * 1000) . 'm'
"    call matchdelete(ring)
"    redraw
"endfunction

